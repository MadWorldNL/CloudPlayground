name: cloud-playground
services:
  my-api-web:
    image: cloud-playground/api-web
    profiles: [all]
    build: 
      context: .
      dockerfile: src/Server.Controllers.Api.Web/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - "MessageBus__Host=host.docker.internal"
    ports:
      - "7010:8080"
      - "7011:8081"
  my-api-messagebus:
    image: cloud-playground/api-messagebus
    profiles: [all]
    build:
      context: .
      dockerfile: src/Server.Controllers.Api.MessageBus/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - "MessageBus__Host=host.docker.internal"
    ports:
      - "7012:8080"
      - "7013:8081"
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      - "POSTGRES_USER=development"
      - "POSTGRES_PASSWORD=mysecretpassword"
      - "PGDATA=/var/lib/postgresql/data/pgdata"
    ports:
      - "5432:5432"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  rabbitmq:
    container_name: rabbitmq
    hostname: my-rabbit
    image: rabbitmq:3-management
    environment:
      - "RABBITMQ_DEFAULT_USER=development"
      - "RABBITMQ_DEFAULT_PASS=mysecretpassword"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
volumes:
  rabbitmq_data:
  postgres_data: